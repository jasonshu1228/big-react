{"code":"import { FiberNode, FiberRootNode } from './fiber';\r\nimport { createUpdate, createUpdateQueue, enqueueUpdate } from './updateQueue';\r\nimport { scheduleUpdateOnFiber } from './workLoop';\r\nimport { HostRoot } from './workTags';\r\n// 创建整个应用的根节点 FiberRootNode，并将它与 hostRootFiber 链接起来\r\n// 在执行ReactDOM.createRoot()的时候会执行\r\nexport function createContainer(container) {\r\n    const hostRootFiber = new FiberNode(HostRoot, {}, null);\r\n    const root = new FiberRootNode(container, hostRootFiber);\r\n    // 与之前的更新流程联系\r\n    hostRootFiber.updateQueue = createUpdateQueue();\r\n    return root;\r\n}\r\n// 创建update，并enqueueUpdateQueue中，并将更新机制和首屏渲染hostRootFiber联系起来\r\n// 在执行ReactDOM.createRoot(rootElement).render(<App />) 时执行，主要是 render\r\nexport function updateContainer(element, root) {\r\n    const hostRootFiber = root.current; // FiberRootNode实例指向的保存DOM结构的根节点\r\n    // 接下来开始首屏渲染更新\r\n    const update = createUpdate(element);\r\n    // 将首屏渲染和触发更新机制联系了起来\r\n    // 将update插入到hostRootFiber中的updateQueue中\r\n    enqueueUpdate(hostRootFiber.updateQueue, update);\r\n    // 触发函数更新，并调用scheduleUpdateOnFiber函数里的 renderRoot函数创建一个新的Fiber树\r\n    scheduleUpdateOnFiber(hostRootFiber);\r\n    return element;\r\n}\r\n// TODO：创建了mount时的api，并把api接入了更新流程\r\n// api指 ReactDOM.createRoot(rootElement).render(<App />)\r\n//# sourceMappingURL=fiberReconciler.js.map","references":["/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-dom/src/hostConfig.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/shared/ReactTypes.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-reconciler/src/fiber.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-reconciler/src/updateQueue.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-reconciler/src/workLoop.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-reconciler/src/workTags.ts"],"map":"{\"version\":3,\"file\":\"fiberReconciler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../packages/react-reconciler/src/fiberReconciler.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EAAE,SAAS,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AACnD,OAAO,EACN,YAAY,EACZ,iBAAiB,EACjB,aAAa,EAEb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,mDAAmD;AACnD,iCAAiC;AACjC,MAAM,UAAU,eAAe,CAAC,SAAoB;IACnD,MAAM,aAAa,GAAG,IAAI,SAAS,CAAC,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;IACxD,MAAM,IAAI,GAAG,IAAI,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;IAEzD,aAAa;IACb,aAAa,CAAC,WAAW,GAAG,iBAAiB,EAAE,CAAC;IAChD,OAAO,IAAI,CAAC;AACb,CAAC;AAED,6DAA6D;AAC7D,qEAAqE;AACrE,MAAM,UAAU,eAAe,CAC9B,OAAgC,EAChC,IAAmB;IAEnB,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,gCAAgC;IACpE,cAAc;IACd,MAAM,MAAM,GAAG,YAAY,CAA0B,OAAO,CAAC,CAAC;IAC9D,oBAAoB;IACpB,wCAAwC;IACxC,aAAa,CACZ,aAAa,CAAC,WAAmD,EACjE,MAAM,CACN,CAAC;IAEF,+DAA+D;IAC/D,qBAAqB,CAAC,aAAa,CAAC,CAAC;IAErC,OAAO,OAAO,CAAC;AAChB,CAAC;AAED,kCAAkC;AAClC,wDAAwD\"}"}
