{"code":"import { FunctionComponent, HostComponent } from './workTags';\r\nimport { NoFlags } from './fiberFlags';\r\n// ReactElement 对象的每个节点都会生成与之对应的 FiberNode\r\n// React针对不同的 ReactElement 对象会产生不同tag（种类）的 FiberNode\r\n// fiber.ts 存放 FiberNode 的数据结构\r\nexport class FiberNode {\r\n    // 跟自身有关的属性\r\n    type;\r\n    tag;\r\n    pendingProps;\r\n    key;\r\n    ref;\r\n    stateNode;\r\n    // 跟工作单元其它节点有关的属性\r\n    return;\r\n    sibling;\r\n    child;\r\n    index;\r\n    memoizedProps;\r\n    memoizedState;\r\n    alternate; // 双缓冲树的切换\r\n    subtreeFlags; // 子树中包含的flags\r\n    flags; // fiberNode 双缓冲树对比之后产生的标记，比如插入，移动，删除等\r\n    updateQueue;\r\n    // pendingProps 有哪些 props 需要改变\r\n    // key：对应的是 ReactElement 的 key\r\n    constructor(tag, pendingProps, key) {\r\n        // 实例自身上的属性\r\n        this.tag = tag;\r\n        this.key = key;\r\n        // HostComponent <div> => Dom\r\n        this.stateNode = null;\r\n        // FunctionComponent () => 这个函数本身\r\n        this.type = null;\r\n        this.ref = null;\r\n        // fiber 除了有自身实例上的属性，还需要有表示和其它节点的关系\r\n        // 作为树状结构\r\n        // 一个子级 fiberNode 指向 父级 FiberNode：表示子 fiberNode 工作结束后要 return 到父fiberNode工作\r\n        this.return = null;\r\n        // 右边的兄弟 fiberNode\r\n        this.sibling = null;\r\n        // 子 fiberNode\r\n        this.child = null;\r\n        // <li>1</li> <li>2</li> 表示它的序号\r\n        this.index = 0;\r\n        // 作为工作单元\r\n        this.pendingProps = pendingProps; // 刚开始工作阶段的 props\r\n        this.memoizedProps = null; // 工作结束时确定下来的 props\r\n        this.memoizedState = null; // 更新完成后的新 state\r\n        this.updateQueue = null; // Fiber产生的更新操作都会放在更新队列中\r\n        this.alternate = null; // 用于 current Fiber树和 workInProgress Fiber树的切换（如果当时fiberNode树是current树，则alternate指向的是workInProgress树）\r\n        // 副作用\r\n        this.flags = NoFlags; // （比如插入 更改 删除dom等）初始状态时表示没有任何标记（因为还没进行fiberNode对比）\r\n        this.subtreeFlags = NoFlags; // 子节点副作用标识\r\n    }\r\n}\r\nexport class FiberRootNode {\r\n    container; // 保存宿主环境挂载的节点(DomELement或者原生组件)\r\n    current; // 指向当前渲染的Fiber树的根节点，也就是 hostRootFiber\r\n    finishedWork; // 指向完成更新后的新的Fiber树的根节点\r\n    constructor(container, hostRootFiber) {\r\n        this.container = container; // 保存宿主环境挂载的节点(DomELement或者原生组件)\r\n        this.current = hostRootFiber; // 指向当前渲染的Fiber树的根节点，也就是 hostRootFiber\r\n        hostRootFiber.stateNode = this; // 把当前 FiberRootNode 实例挂载到 hostRootFiber.stateNode 上\r\n        this.finishedWork = null; // 指向完成更新后的新的Fiber树的根节点\r\n    }\r\n}\r\n/**\r\n * workInProgress Fiber表示渲染阶段正在处理的组件\r\n * 该函数主要用来创建或复用一个workInProgress Fiber对象\r\n * @param current 当前的Fiber对象\r\n * @param pendingProps 新的属性对象\r\n * @returns\r\n */\r\nexport const createWorkInProgress = (current, pendingProps) => {\r\n    let wip = current.alternate;\r\n    if (wip === null) {\r\n        // mount阶段\r\n        wip = new FiberNode(current.tag, pendingProps, current.key);\r\n        // 创建一个新的 Fiber对象（HostFiberNode，例如根元素 div），并复制current的属性和标记\r\n        wip.type = current.type;\r\n        wip.stateNode = current.stateNode;\r\n        wip.alternate = current;\r\n        current.alternate = wip;\r\n    }\r\n    else {\r\n        // update阶段\r\n        // 复用，更新属性标记\r\n        wip.pendingProps = pendingProps;\r\n        // 清除副作用，可能是上一次更新遗留下来的\r\n        wip.flags = NoFlags;\r\n        // 子树的副作用标识\r\n        wip.subtreeFlags = NoFlags;\r\n    }\r\n    // 把 current节点对应的 fiber tree 上的工作单元复制到 wip上\r\n    wip.type = current.type;\r\n    wip.updateQueue = current.updateQueue;\r\n    wip.child = current.child;\r\n    wip.memoizedProps = current.memoizedProps;\r\n    wip.memoizedState = current.memoizedState;\r\n    return wip;\r\n};\r\n// 根据element创建 FiberNode\r\nexport function createFiberFromElement(element) {\r\n    const { type, key, props } = element;\r\n    let fiberTag = FunctionComponent;\r\n    if (typeof type === 'string') {\r\n        // <div>111</div> type: 'div'\r\n        fiberTag = HostComponent;\r\n    }\r\n    else if (typeof type !== 'function' && true) {\r\n        console.warn('未定义的type类型', element);\r\n    }\r\n    const fiber = new FiberNode(fiberTag, props, key);\r\n    fiber.type = type;\r\n    return fiber;\r\n}\r\n//# sourceMappingURL=fiber.js.map","references":["/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/shared/ReactTypes.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-reconciler/src/workTags.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-reconciler/src/fiberFlags.ts","/Users/liangshuhao/Learn/coderwhy/Learn React/Big-React18-/big-react18/packages/react-dom/src/hostConfig.ts"],"map":"{\"version\":3,\"file\":\"fiber.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../packages/react-reconciler/src/fiber.ts\"],\"names\":[],\"mappings\":\"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\"}"}
